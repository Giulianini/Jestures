plugins {
    id 'com.jfrog.bintray' version '1.8.4'
    id "com.jfrog.artifactory" version "4.9.6"
    id 'java-library'
    id 'java'
    id 'maven'
    id 'maven-publish'
    id 'signing'
    id 'jacoco'
    id 'pmd'
    id 'findbugs'
    id 'checkstyle'
    id 'project-report'
}

group = project_group
archivesBaseName = project_artifact
version = project.project_version

jacocoTestReport {
    reports {
        xml.enabled false
        csv.enabled false
        html.destination file("${buildDir}/reports/jacocoHtml")
    }
}

//TASKS
task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

task fatJar(type: Jar) {
    classifier = 'all'
    manifest {
        attributes 'Implementation-Title': 'Gradle Jar File Example'
    }
    baseName = project.name + '-all'
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

jar {
    doFirst {
        manifest {
            if (!configurations.compile.isEmpty()) {
                attributes(
                        'Class-Path': configurations.localCompile.collect { it.getName() }.join(' '))
            }
        }
    }
    from {
        configurations.localCompile.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

configurations {
    localCompile.transitive = false
    compile.extendsFrom(localCompile)
}

repositories {
    mavenCentral()
    jcenter()
    flatDir {
        dir 'libs'
    }
}

dependencies {
    localCompile fileTree(dir: 'libs', include: '*.jar')
    implementation "org.apache.commons:commons-math3:${project.commonMathVersion}"
    implementation "com.google.guava:guava:${project.guavaVersion}"
    implementation "log4j:log4j:${project.log4jVersion}"
    implementation "com.google.code.gson:gson:${project.gsonVersion}"
    implementation "com.github.haifengl:smile-core:${project.smile_coreVersion}"
    implementation "com.jfoenix:jfoenix:${project.jfoenixVersion}"
    implementation "org.kordamp.ikonli:ikonli-core:${project.ikonli_coreVersion}"
    implementation "org.kordamp.ikonli:ikonli-javafx:${project.ikonli_javafxVersion}"
    implementation "org.kordamp.ikonli:ikonli-material-pack:${project.ikonli_material_packVersion}"
    implementation "eu.hansolo.enzo:Enzo:${project.enzoVersion}"
    testImplementation("org.junit.jupiter:junit-jupiter:${project.junitVersion}")
    testRuntime("org.junit.jupiter:junit-jupiter-engine:${project.junitVersion}")
}

sourceSets {
    main {
        java {
            srcDirs = ["src/main/java"]
        }
        resources {
            srcDirs = ["src/main/resources"]
        }
    }
}

//CODE ANALYSIS
check.dependsOn jacocoTestCoverageVerification
check.finalizedBy jacocoTestReport
jacocoTestReport.finalizedBy htmlDependencyReport
jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.1
            }
        }
    }
}

test {
    useJUnitPlatform()
}

checkstyle {
    toolVersion = '8.0'
    configFile = file('config/checkstyle/checkstyle.xml')
}

findbugs {
    ignoreFailures = true
    sourceSets = [sourceSets.main]
    effort = "max"
}

pmd {
    ignoreFailures = true
    //ruleSets = ["category/java/errorprone.xml"]
}

//BINTRAY
bintray {
    user = project.hasProperty('bintrayUsername') ? project.property('bintrayUsername') : System.getenv('BINTRAY_USER')
    key = project.hasProperty('bintrayApiKey') ? project.property('bintrayApiKey') : System.getenv('BINTRAY_KEY')

    publications = ['maven']

    dryRun = false //[Default: false] Whether to run this as dry-run, without deploying
    publish = false //[Default: false] Whether version should be auto published after an upload
    override = false //[Default: false] Whether to override version artifacts already published

    pkg {
        repo = project.bintray_repo_name
        name = project.project_name
        desc = project.project_description
        licenses = [project.project_license_tag]
        labels = ['Jestures', 'sensor', 'kinect', 'tracking', 'Recognition', 'Gesture']
        publicDownloadNumbers = true
        websiteUrl = "https://github.com/$project.your_github_name/$project.project_name"
        issueTrackerUrl = "https://github.com/$project.your_github_name/$project.project_name/issues"
        vcsUrl = "https://github.com/$your_github_name/${project.project_name}.git"
        githubRepo = "$your_github_name/$project.project_name"
        githubReleaseNotesFile = 'Releasenotes.md'
        version {
            name = project.project_version
            vcsTag = project.project_version
            desc = project.project_version
            released = new Date()
            gpg {
                sign = true
            }
            mavenCentralSync {
                sync = false //[Default: true] Determines whether to sync the version to Maven Central.
                //user = 'userToken' //OSS user token: mandatory
                //password = 'paasword' //OSS user password: mandatory
                //close = '1'
            }
        }
    }
}

// to publish SNAPSHOTs to http://oss.jfrog.org/oss-snapshot-local/ 
// and !SNAPSHOTs to http://oss.jfrog.org/oss-release-local/
artifactory {
    contextUrl = 'https://oss.jfrog.org'
    resolve {
        repository {
            repoKey = 'libs-release'
        }
    }
    publish {
        repository {
            // The Artifactory repository key to publish to
            // when using oss.jfrog.org the credentials are from Bintray.
            if (project.version.endsWith("-SNAPSHOT")) {
                repoKey = 'oss-snapshot-local'
            } else {
                repoKey = 'oss-release-local'
            }
            username = System.getenv('BINTRAY_USER')
            password = System.getenv('BINTRAY_KEY')
        }
        defaults {
            publications 'maven'
            properties = ['bintray.repo': 'giulianini/maven', 'bintray.package': 'giulianini:giulianini', 'bintray.version': project.project_version.toString()]
        }
    }
}

publishing {
    publications {
        maven(MavenPublication) {
            from components.java
            groupId project.project_group
            artifactId project.project_artifact
            version project.project_version

            artifact sourcesJar {
                classifier 'sources'
            }

            artifact javadocJar {
                classifier 'javadoc'
            }

            artifact fatJar {
                classifier 'all'
            }

            pom {
                packaging 'jar'
                withXml {
                    asNode().children().last() + {
                        def builder = delegate

                        // maven central publishing mandatories
                        builder.name project.project_name
                        builder.description project.project_description
                        builder.url "https://github.com/$project.your_github_name/$project.project_name"

                        builder.licenses {
                            builder.license {
                                builder.name project.project_license
                                builder.url project.project_license_url
                                builder.distribution 'repo'
                            }
                        }

                        builder.scm {
                            builder.url "scm:svn:http://github.com/$project.your_github_name/$project.project_name"
                            builder.connection "scm:svn:http://github.com/$your_github_name/${project.project_name}.git"
                            builder.developerConnection "scm:svn:ssh://github.com/$your_github_name/${project.project_name}.git"
                        }

                        builder.developers {
                            builder.developer {
                                builder.name 'Luca Giulianini'
                                builder.email 'luca.giulianini@studio.unibo.it'
                            }
                        }

                        // maven central publishing optionals
                        builder.issueManagement {
                            builder.system 'github'
                            builder.url "https://github.com/$project.your_github_name/$project.project_name/issues"
                        }

                        builder.ciManagement {
                            builder.system 'Travis CI'
                            builder.url "https://travis-ci.org/$project.your_github_name/$project.project_name"
                        }
                    }
                }
            }
        }
    }
}

publishing {
    if (!version.toString().endsWith('-SNAPSHOT'))
        publish.dependsOn bintrayUpload
    else if (version.toString().endsWith('-SNAPSHOT'))
        publish.dependsOn artifactoryPublish
}

signing {
    required { gradle.taskGraph.hasTask("uploadArchives") }
    sign configurations.archives
}

artifacts {
    archives javadocJar, sourcesJar, fatJar, jar
}

task printVersion() {
    println(project.project_version)
}



